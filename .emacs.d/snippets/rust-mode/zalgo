# -*- mode: snippet -*-
# name: zalgo
# key: zalgo
# --
fn zalgo<T>(s: &[T]) -> Vec<usize>
where
    T: PartialEq,
{
    let mut a = vec![0; s.len()];
    a[0] = s.len();

    let mut i = 1;
    let mut j = 0;
    while i < s.len() {
        while i + j < s.len() && s[j] == s[i + j] {
            j += 1;
        }
        a[i] = j;
        if j == 0 {
            i += 1;
            continue;
        }
        let mut k = 1;
        while (i + k < s.len() && k + a[k] < j) {
            a[i + k] = a[k];
            k += 1;
        }
        i += k;
        j -= k;
    }

    a
}

#[test]
fn zalgo_test() {
    assert_eq!(
        zalgo("aaabaaaab".as_bytes()),
        vec![9, 2, 1, 0, 3, 4, 2, 1, 0]
    );
}
