#[derive(Debug)]
struct SegTree<T> {
    n: usize,
    init: T,
    dat: Vec<T>,
    op: fn(T, T) -> T,
}

impl<T: Copy> SegTree<T> {

    pub fn new(n: usize, init: T, op: fn(T, T) -> T ) -> Self
    {
        let mut nn = 1;

        while nn < n {
            nn *= 2;
        }

        SegTree {
            n: nn,
            init,
            dat: vec![init; nn*2-1],
            op,
        }
    }

    pub fn get(&self, k: usize) -> T {
        let mut k = k;
        k += self.n - 1;
        self.dat[k]
    }

    // k番目の値をaに変更
    pub fn update(&mut self, k: usize, a: T) {
        let mut k = k;
        k += self.n - 1;
        self.dat[k] = a;

        while k > 0 {
            k = (k-1) / 2;
            self.dat[k] = (self.op)(self.dat[k*2+1], self.dat[k*2+2]);
        }
    }

    fn query(&self, a: usize, b: usize) -> T {
        self.query_(a,b,0,0,self.n)
    }

    // [a, b)の最小値を求める
    fn query_(&self, a :usize, b: usize, k: usize, l: usize, r: usize) -> T {
        if r <= a || b <= l {
            return self.init;
        }

        if a <= l && r <= b {
            return self.dat[k];
        }

        let vl = self.query_(a,b, k*2+1, l, (l+r)/2);
        let vr = self.query_(a,b, k*2+2, (l+r)/2, r);

        (self.op)(vl, vr)
    }
}
