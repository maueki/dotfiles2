# -*- mode: snippet -*-
# name: uf
# key: uf
# --
struct UnionFind {
    par: Vec<usize>,
    siz: Vec<usize>,
    rank: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let mut uf = UnionFind{ par: vec![0; n], rank: vec![0;n ], siz: vec![1; n] };
        for i in 0..n {
            uf.par[i] = i;
        }
        uf
    }

    fn root(&mut self, x: usize) -> usize {
        let t = self.par[x];
        if  t == x {
            x
        } else {
            self.par[x] = self.root(t);
            self.par[x]
        }
    }

    fn is_same(&mut self, x: usize, y: usize) -> bool {
        self.root(x) == self.root(y)
    }

    fn unite(&mut self, x: usize, y: usize) -> bool {
        let rx = self.root(x);
        let ry = self.root(y);
        if rx == ry { return false; }

        let (rx, ry) = if self.rank[rx] < self.rank[ry] { (ry, rx) } else { (rx, ry) };
        self.par[ry] = rx;

        if self.rank[rx] == self.rank[ry] {
            self.rank[rx] += 1;
        }

        self.siz[rx] += self.siz[ry];

        true
    }

    fn size(&mut self, x: usize) -> usize {
        let rx = self.root(x);
        self.siz[rx]
    }
}
